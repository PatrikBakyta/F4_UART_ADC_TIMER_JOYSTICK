
C:\Users\Patrik Bakyta\Documents\GitHub\VRS\F4_UART_ADC_TIMER_JOYSTICK\Debug\F4_UART_ADC_TIMER_JOYSTICK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001574  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080016fc  080016fc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080016fc  080016fc  000116fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001700  08001700  00011700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08001704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  7 .bss          0000002c  20000024  20000024  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000050  20000050  00020024  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006272  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000e04  00000000  00000000  000262c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008c8  00000000  00000000  000270d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000820  00000000  00000000  00027998  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002932  00000000  00000000  000281b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002cb3  00000000  00000000  0002aaea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0002d79d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002628  00000000  00000000  0002d81c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002fe44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080016e4 	.word	0x080016e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	080016e4 	.word	0x080016e4

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d038      	beq.n	8000256 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001ee:	0a1b      	lsrs	r3, r3, #8
 80001f0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	f1c3 0304 	rsb	r3, r3, #4
 80001f8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fa:	7b7a      	ldrb	r2, [r7, #13]
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	fa42 f303 	asr.w	r3, r2, r3
 8000202:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	785b      	ldrb	r3, [r3, #1]
 8000208:	461a      	mov	r2, r3
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	789a      	ldrb	r2, [r3, #2]
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	4013      	ands	r3, r2
 800021a:	b2da      	uxtb	r2, r3
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	4313      	orrs	r3, r2
 8000220:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4413      	add	r3, r2
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000236:	4a14      	ldr	r2, [pc, #80]	; (8000288 <NVIC_Init+0xc0>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	095b      	lsrs	r3, r3, #5
 800023e:	b2db      	uxtb	r3, r3
 8000240:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	f003 031f 	and.w	r3, r3, #31
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000250:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000254:	e00f      	b.n	8000276 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000256:	490c      	ldr	r1, [pc, #48]	; (8000288 <NVIC_Init+0xc0>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	095b      	lsrs	r3, r3, #5
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	f003 031f 	and.w	r3, r3, #31
 800026a:	2201      	movs	r2, #1
 800026c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800026e:	f100 0320 	add.w	r3, r0, #32
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000296:	f000 fba9 	bl	80009ec <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 800029a:	2100      	movs	r1, #0
 800029c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80002a0:	f000 fba4 	bl	80009ec <RCC_APB2PeriphResetCmd>
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002ca:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	791b      	ldrb	r3, [r3, #4]
 80002d0:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002d6:	4313      	orrs	r3, r2
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	4313      	orrs	r3, r2
 80002dc:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <ADC_Init+0xa8>)
 80002ee:	4013      	ands	r3, r2
 80002f0:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002fa:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000300:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	795b      	ldrb	r3, [r3, #5]
 8000306:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000308:	4313      	orrs	r3, r2
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	4313      	orrs	r3, r2
 800030e:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800031a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000322:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	7d1b      	ldrb	r3, [r3, #20]
 8000328:	3b01      	subs	r3, #1
 800032a:	b2da      	uxtb	r2, r3
 800032c:	7afb      	ldrb	r3, [r7, #11]
 800032e:	4313      	orrs	r3, r2
 8000330:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000332:	7afb      	ldrb	r3, [r7, #11]
 8000334:	051b      	lsls	r3, r3, #20
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	4313      	orrs	r3, r2
 800033a:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	c0fff7fd 	.word	0xc0fff7fd

08000354 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	460b      	mov	r3, r1
 800035e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d006      	beq.n	8000374 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	f043 0201 	orr.w	r2, r3, #1
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000372:	e005      	b.n	8000380 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	f023 0201 	bic.w	r2, r3, #1
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	609a      	str	r2, [r3, #8]
  }
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr

0800038c <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	4608      	mov	r0, r1
 8000396:	4611      	mov	r1, r2
 8000398:	461a      	mov	r2, r3
 800039a:	4603      	mov	r3, r0
 800039c:	70fb      	strb	r3, [r7, #3]
 800039e:	460b      	mov	r3, r1
 80003a0:	70bb      	strb	r3, [r7, #2]
 80003a2:	4613      	mov	r3, r2
 80003a4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	2300      	movs	r3, #0
 80003ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80003ae:	78fb      	ldrb	r3, [r7, #3]
 80003b0:	2b09      	cmp	r3, #9
 80003b2:	d923      	bls.n	80003fc <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80003ba:	78fb      	ldrb	r3, [r7, #3]
 80003bc:	f1a3 020a 	sub.w	r2, r3, #10
 80003c0:	4613      	mov	r3, r2
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	4413      	add	r3, r2
 80003c6:	2207      	movs	r2, #7
 80003c8:	fa02 f303 	lsl.w	r3, r2, r3
 80003cc:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	43db      	mvns	r3, r3
 80003d2:	68fa      	ldr	r2, [r7, #12]
 80003d4:	4013      	ands	r3, r2
 80003d6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80003d8:	7879      	ldrb	r1, [r7, #1]
 80003da:	78fb      	ldrb	r3, [r7, #3]
 80003dc:	f1a3 020a 	sub.w	r2, r3, #10
 80003e0:	4613      	mov	r3, r2
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	4413      	add	r3, r2
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	e01e      	b.n	800043a <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	691b      	ldr	r3, [r3, #16]
 8000400:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000402:	78fa      	ldrb	r2, [r7, #3]
 8000404:	4613      	mov	r3, r2
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	4413      	add	r3, r2
 800040a:	2207      	movs	r2, #7
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	43db      	mvns	r3, r3
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	4013      	ands	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800041c:	7879      	ldrb	r1, [r7, #1]
 800041e:	78fa      	ldrb	r2, [r7, #3]
 8000420:	4613      	mov	r3, r2
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	4413      	add	r3, r2
 8000426:	fa01 f303 	lsl.w	r3, r1, r3
 800042a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800042c:	68fa      	ldr	r2, [r7, #12]
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	4313      	orrs	r3, r2
 8000432:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	68fa      	ldr	r2, [r7, #12]
 8000438:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800043a:	78bb      	ldrb	r3, [r7, #2]
 800043c:	2b06      	cmp	r3, #6
 800043e:	d821      	bhi.n	8000484 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000444:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000446:	78bb      	ldrb	r3, [r7, #2]
 8000448:	1e5a      	subs	r2, r3, #1
 800044a:	4613      	mov	r3, r2
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4413      	add	r3, r2
 8000450:	221f      	movs	r2, #31
 8000452:	fa02 f303 	lsl.w	r3, r2, r3
 8000456:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	43db      	mvns	r3, r3
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	4013      	ands	r3, r2
 8000460:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000462:	78f9      	ldrb	r1, [r7, #3]
 8000464:	78bb      	ldrb	r3, [r7, #2]
 8000466:	1e5a      	subs	r2, r3, #1
 8000468:	4613      	mov	r3, r2
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	4413      	add	r3, r2
 800046e:	fa01 f303 	lsl.w	r3, r1, r3
 8000472:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	4313      	orrs	r3, r2
 800047a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	68fa      	ldr	r2, [r7, #12]
 8000480:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000482:	e047      	b.n	8000514 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000484:	78bb      	ldrb	r3, [r7, #2]
 8000486:	2b0c      	cmp	r3, #12
 8000488:	d821      	bhi.n	80004ce <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000490:	78bb      	ldrb	r3, [r7, #2]
 8000492:	1fda      	subs	r2, r3, #7
 8000494:	4613      	mov	r3, r2
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	4413      	add	r3, r2
 800049a:	221f      	movs	r2, #31
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	43db      	mvns	r3, r3
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	4013      	ands	r3, r2
 80004aa:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80004ac:	78f9      	ldrb	r1, [r7, #3]
 80004ae:	78bb      	ldrb	r3, [r7, #2]
 80004b0:	1fda      	subs	r2, r3, #7
 80004b2:	4613      	mov	r3, r2
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	4413      	add	r3, r2
 80004b8:	fa01 f303 	lsl.w	r3, r1, r3
 80004bc:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	68fa      	ldr	r2, [r7, #12]
 80004ca:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80004cc:	e022      	b.n	8000514 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80004d4:	78bb      	ldrb	r3, [r7, #2]
 80004d6:	f1a3 020d 	sub.w	r2, r3, #13
 80004da:	4613      	mov	r3, r2
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	4413      	add	r3, r2
 80004e0:	221f      	movs	r2, #31
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	43db      	mvns	r3, r3
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	4013      	ands	r3, r2
 80004f0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80004f2:	78f9      	ldrb	r1, [r7, #3]
 80004f4:	78bb      	ldrb	r3, [r7, #2]
 80004f6:	f1a3 020d 	sub.w	r2, r3, #13
 80004fa:	4613      	mov	r3, r2
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4413      	add	r3, r2
 8000500:	fa01 f303 	lsl.w	r3, r1, r3
 8000504:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	4313      	orrs	r3, r2
 800050c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	68fa      	ldr	r2, [r7, #12]
 8000512:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	609a      	str	r2, [r3, #8]
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054c:	b29b      	uxth	r3, r3
}
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8000568:	2300      	movs	r3, #0
 800056a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	4013      	ands	r3, r2
 8000574:	2b00      	cmp	r3, #0
 8000576:	d002      	beq.n	800057e <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000578:	2301      	movs	r3, #1
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	e001      	b.n	8000582 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 800057e:	2300      	movs	r3, #0
 8000580:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000582:	7bfb      	ldrb	r3, [r7, #15]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000590:	b480      	push	{r7}
 8000592:	b087      	sub	sp, #28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	e076      	b.n	800069a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80005ac:	2201      	movs	r2, #1
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	4013      	ands	r3, r2
 80005be:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d165      	bne.n	8000694 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	2103      	movs	r1, #3
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	401a      	ands	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	4619      	mov	r1, r3
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	fa01 f303 	lsl.w	r3, r1, r3
 80005f0:	431a      	orrs	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d003      	beq.n	8000606 <GPIO_Init+0x76>
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	2b02      	cmp	r3, #2
 8000604:	d12e      	bne.n	8000664 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	689a      	ldr	r2, [r3, #8]
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	2103      	movs	r1, #3
 8000610:	fa01 f303 	lsl.w	r3, r1, r3
 8000614:	43db      	mvns	r3, r3
 8000616:	401a      	ands	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689a      	ldr	r2, [r3, #8]
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	795b      	ldrb	r3, [r3, #5]
 8000624:	4619      	mov	r1, r3
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	fa01 f303 	lsl.w	r3, r1, r3
 800062e:	431a      	orrs	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	b29b      	uxth	r3, r3
 800063c:	2101      	movs	r1, #1
 800063e:	fa01 f303 	lsl.w	r3, r1, r3
 8000642:	43db      	mvns	r3, r3
 8000644:	401a      	ands	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	685a      	ldr	r2, [r3, #4]
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	799b      	ldrb	r3, [r3, #6]
 8000652:	4619      	mov	r1, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	b29b      	uxth	r3, r3
 8000658:	fa01 f303 	lsl.w	r3, r1, r3
 800065c:	b29b      	uxth	r3, r3
 800065e:	431a      	orrs	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68da      	ldr	r2, [r3, #12]
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	b29b      	uxth	r3, r3
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	2103      	movs	r1, #3
 8000670:	fa01 f303 	lsl.w	r3, r1, r3
 8000674:	43db      	mvns	r3, r3
 8000676:	401a      	ands	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	79db      	ldrb	r3, [r3, #7]
 8000684:	4619      	mov	r1, r3
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	fa01 f303 	lsl.w	r3, r1, r3
 800068e:	431a      	orrs	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3301      	adds	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	2b0f      	cmp	r3, #15
 800069e:	d985      	bls.n	80005ac <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80006a0:	bf00      	nop
 80006a2:	371c      	adds	r7, #28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	887a      	ldrh	r2, [r7, #2]
 80006bc:	831a      	strh	r2, [r3, #24]
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop

080006cc <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	887a      	ldrh	r2, [r7, #2]
 80006dc:	835a      	strh	r2, [r3, #26]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	807b      	strh	r3, [r7, #2]
 80006f8:	4613      	mov	r3, r2
 80006fa:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000704:	787a      	ldrb	r2, [r7, #1]
 8000706:	887b      	ldrh	r3, [r7, #2]
 8000708:	f003 0307 	and.w	r3, r3, #7
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000714:	887b      	ldrh	r3, [r7, #2]
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	b29b      	uxth	r3, r3
 800071a:	4618      	mov	r0, r3
 800071c:	887b      	ldrh	r3, [r7, #2]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	b29b      	uxth	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3208      	adds	r2, #8
 8000728:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800072c:	887b      	ldrh	r3, [r7, #2]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	210f      	movs	r1, #15
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43db      	mvns	r3, r3
 800073c:	ea02 0103 	and.w	r1, r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f100 0208 	add.w	r2, r0, #8
 8000746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800074a:	887b      	ldrh	r3, [r7, #2]
 800074c:	08db      	lsrs	r3, r3, #3
 800074e:	b29b      	uxth	r3, r3
 8000750:	461a      	mov	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	3208      	adds	r2, #8
 8000756:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	4313      	orrs	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	08db      	lsrs	r3, r3, #3
 8000764:	b29b      	uxth	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3208      	adds	r2, #8
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800078a:	4a04      	ldr	r2, [pc, #16]	; (800079c <RCC_HSICmd+0x1c>)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	42470000 	.word	0x42470000

080007a0 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <RCC_SYSCLKConfig+0x34>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f023 0303 	bic.w	r3, r3, #3
 80007b8:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80007c2:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <RCC_SYSCLKConfig+0x34>)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	6093      	str	r3, [r2, #8]
}
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	40023800 	.word	0x40023800

080007d8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
 80007ec:	2302      	movs	r3, #2
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	2302      	movs	r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80007f8:	4b48      	ldr	r3, [pc, #288]	; (800091c <RCC_GetClocksFreq+0x144>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	f003 030c 	and.w	r3, r3, #12
 8000800:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	2b04      	cmp	r3, #4
 8000806:	d007      	beq.n	8000818 <RCC_GetClocksFreq+0x40>
 8000808:	2b08      	cmp	r3, #8
 800080a:	d009      	beq.n	8000820 <RCC_GetClocksFreq+0x48>
 800080c:	2b00      	cmp	r3, #0
 800080e:	d13f      	bne.n	8000890 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a43      	ldr	r2, [pc, #268]	; (8000920 <RCC_GetClocksFreq+0x148>)
 8000814:	601a      	str	r2, [r3, #0]
      break;
 8000816:	e03f      	b.n	8000898 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a42      	ldr	r2, [pc, #264]	; (8000924 <RCC_GetClocksFreq+0x14c>)
 800081c:	601a      	str	r2, [r3, #0]
      break;
 800081e:	e03b      	b.n	8000898 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000820:	4b3e      	ldr	r3, [pc, #248]	; (800091c <RCC_GetClocksFreq+0x144>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000828:	0d9b      	lsrs	r3, r3, #22
 800082a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800082c:	4b3b      	ldr	r3, [pc, #236]	; (800091c <RCC_GetClocksFreq+0x144>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000834:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d00d      	beq.n	8000858 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800083c:	4a39      	ldr	r2, [pc, #228]	; (8000924 <RCC_GetClocksFreq+0x14c>)
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	fbb2 f2f3 	udiv	r2, r2, r3
 8000844:	4b35      	ldr	r3, [pc, #212]	; (800091c <RCC_GetClocksFreq+0x144>)
 8000846:	6859      	ldr	r1, [r3, #4]
 8000848:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800084c:	400b      	ands	r3, r1
 800084e:	099b      	lsrs	r3, r3, #6
 8000850:	fb03 f302 	mul.w	r3, r3, r2
 8000854:	61fb      	str	r3, [r7, #28]
 8000856:	e00c      	b.n	8000872 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000858:	4a31      	ldr	r2, [pc, #196]	; (8000920 <RCC_GetClocksFreq+0x148>)
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000860:	4b2e      	ldr	r3, [pc, #184]	; (800091c <RCC_GetClocksFreq+0x144>)
 8000862:	6859      	ldr	r1, [r3, #4]
 8000864:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000868:	400b      	ands	r3, r1
 800086a:	099b      	lsrs	r3, r3, #6
 800086c:	fb03 f302 	mul.w	r3, r3, r2
 8000870:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000872:	4b2a      	ldr	r3, [pc, #168]	; (800091c <RCC_GetClocksFreq+0x144>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800087a:	0c1b      	lsrs	r3, r3, #16
 800087c:	3301      	adds	r3, #1
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000882:	69fa      	ldr	r2, [r7, #28]
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	fbb2 f2f3 	udiv	r2, r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	601a      	str	r2, [r3, #0]
      break;
 800088e:	e003      	b.n	8000898 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a23      	ldr	r2, [pc, #140]	; (8000920 <RCC_GetClocksFreq+0x148>)
 8000894:	601a      	str	r2, [r3, #0]
      break;
 8000896:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000898:	4b20      	ldr	r3, [pc, #128]	; (800091c <RCC_GetClocksFreq+0x144>)
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80008a0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	091b      	lsrs	r3, r3, #4
 80008a6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80008a8:	4a1f      	ldr	r2, [pc, #124]	; (8000928 <RCC_GetClocksFreq+0x150>)
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	4413      	add	r3, r2
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	40da      	lsrs	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <RCC_GetClocksFreq+0x144>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80008c8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	0a9b      	lsrs	r3, r3, #10
 80008ce:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80008d0:	4a15      	ldr	r2, [pc, #84]	; (8000928 <RCC_GetClocksFreq+0x150>)
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	4413      	add	r3, r2
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685a      	ldr	r2, [r3, #4]
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	40da      	lsrs	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <RCC_GetClocksFreq+0x144>)
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80008f0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80008f2:	69bb      	ldr	r3, [r7, #24]
 80008f4:	0b5b      	lsrs	r3, r3, #13
 80008f6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80008f8:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <RCC_GetClocksFreq+0x150>)
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	4413      	add	r3, r2
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	40da      	lsrs	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	60da      	str	r2, [r3, #12]
}
 8000910:	bf00      	nop
 8000912:	3724      	adds	r7, #36	; 0x24
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	40023800 	.word	0x40023800
 8000920:	00f42400 	.word	0x00f42400
 8000924:	017d7840 	.word	0x017d7840
 8000928:	20000000 	.word	0x20000000

0800092c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d006      	beq.n	800094c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800093e:	490a      	ldr	r1, [pc, #40]	; (8000968 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4313      	orrs	r3, r2
 8000948:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800094a:	e006      	b.n	800095a <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800094c:	4906      	ldr	r1, [pc, #24]	; (8000968 <RCC_AHB1PeriphClockCmd+0x3c>)
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	43db      	mvns	r3, r3
 8000956:	4013      	ands	r3, r2
 8000958:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000978:	78fb      	ldrb	r3, [r7, #3]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d006      	beq.n	800098c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800097e:	490a      	ldr	r1, [pc, #40]	; (80009a8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4313      	orrs	r3, r2
 8000988:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800098a:	e006      	b.n	800099a <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800098c:	4906      	ldr	r1, [pc, #24]	; (80009a8 <RCC_APB1PeriphClockCmd+0x3c>)
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	43db      	mvns	r3, r3
 8000996:	4013      	ands	r3, r2
 8000998:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d006      	beq.n	80009cc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80009be:	490a      	ldr	r1, [pc, #40]	; (80009e8 <RCC_APB2PeriphClockCmd+0x3c>)
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <RCC_APB2PeriphClockCmd+0x3c>)
 80009c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80009ca:	e006      	b.n	80009da <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80009cc:	4906      	ldr	r1, [pc, #24]	; (80009e8 <RCC_APB2PeriphClockCmd+0x3c>)
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <RCC_APB2PeriphClockCmd+0x3c>)
 80009d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	43db      	mvns	r3, r3
 80009d6:	4013      	ands	r3, r2
 80009d8:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d006      	beq.n	8000a0c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80009fe:	490a      	ldr	r1, [pc, #40]	; (8000a28 <RCC_APB2PeriphResetCmd+0x3c>)
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <RCC_APB2PeriphResetCmd+0x3c>)
 8000a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000a0a:	e006      	b.n	8000a1a <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000a0c:	4906      	ldr	r1, [pc, #24]	; (8000a28 <RCC_APB2PeriphResetCmd+0x3c>)
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <RCC_APB2PeriphResetCmd+0x3c>)
 8000a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	4013      	ands	r3, r2
 8000a18:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b087      	sub	sp, #28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	095b      	lsrs	r3, r3, #5
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d103      	bne.n	8000a58 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <RCC_GetFlagStatus+0x70>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e009      	b.n	8000a6c <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d103      	bne.n	8000a66 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <RCC_GetFlagStatus+0x70>)
 8000a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e002      	b.n	8000a6c <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <RCC_GetFlagStatus+0x70>)
 8000a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a6a:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	f003 031f 	and.w	r3, r3, #31
 8000a72:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	fa22 f303 	lsr.w	r3, r2, r3
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d002      	beq.n	8000a8a <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000a84:	2301      	movs	r3, #1
 8000a86:	74fb      	strb	r3, [r7, #19]
 8000a88:	e001      	b.n	8000a8e <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000a8e:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	371c      	adds	r7, #28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a29      	ldr	r2, [pc, #164]	; (8000b5c <TIM_TimeBaseInit+0xbc>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d013      	beq.n	8000ae4 <TIM_TimeBaseInit+0x44>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a28      	ldr	r2, [pc, #160]	; (8000b60 <TIM_TimeBaseInit+0xc0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d00f      	beq.n	8000ae4 <TIM_TimeBaseInit+0x44>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aca:	d00b      	beq.n	8000ae4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a25      	ldr	r2, [pc, #148]	; (8000b64 <TIM_TimeBaseInit+0xc4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d007      	beq.n	8000ae4 <TIM_TimeBaseInit+0x44>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a24      	ldr	r2, [pc, #144]	; (8000b68 <TIM_TimeBaseInit+0xc8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d003      	beq.n	8000ae4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a23      	ldr	r2, [pc, #140]	; (8000b6c <TIM_TimeBaseInit+0xcc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d108      	bne.n	8000af6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000ae4:	89fb      	ldrh	r3, [r7, #14]
 8000ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000aea:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	885a      	ldrh	r2, [r3, #2]
 8000af0:	89fb      	ldrh	r3, [r7, #14]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <TIM_TimeBaseInit+0xd0>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d00c      	beq.n	8000b18 <TIM_TimeBaseInit+0x78>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <TIM_TimeBaseInit+0xd4>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d008      	beq.n	8000b18 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b0c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	891a      	ldrh	r2, [r3, #8]
 8000b12:	89fb      	ldrh	r3, [r7, #14]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	89fa      	ldrh	r2, [r7, #14]
 8000b1c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	881a      	ldrh	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <TIM_TimeBaseInit+0xbc>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d003      	beq.n	8000b3e <TIM_TimeBaseInit+0x9e>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <TIM_TimeBaseInit+0xc0>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d104      	bne.n	8000b48 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	7a9b      	ldrb	r3, [r3, #10]
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	829a      	strh	r2, [r3, #20]
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40010000 	.word	0x40010000
 8000b60:	40010400 	.word	0x40010400
 8000b64:	40000400 	.word	0x40000400
 8000b68:	40000800 	.word	0x40000800
 8000b6c:	40000c00 	.word	0x40000c00
 8000b70:	40001000 	.word	0x40001000
 8000b74:	40001400 	.word	0x40001400

08000b78 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d008      	beq.n	8000b9c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000b9a:	e007      	b.n	8000bac <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	f023 0301 	bic.w	r3, r3, #1
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	801a      	strh	r2, [r3, #0]
  }
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000bc8:	787b      	ldrb	r3, [r7, #1]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d008      	beq.n	8000be0 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	899b      	ldrh	r3, [r3, #12]
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	887b      	ldrh	r3, [r7, #2]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000bde:	e009      	b.n	8000bf4 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	899b      	ldrh	r3, [r3, #12]
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	4013      	ands	r3, r2
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	819a      	strh	r2, [r3, #12]
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	81bb      	strh	r3, [r7, #12]
 8000c14:	2300      	movs	r3, #0
 8000c16:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	8a1b      	ldrh	r3, [r3, #16]
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	887b      	ldrh	r3, [r7, #2]
 8000c20:	4013      	ands	r3, r2
 8000c22:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	899b      	ldrh	r3, [r3, #12]
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000c30:	89bb      	ldrh	r3, [r7, #12]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d005      	beq.n	8000c42 <TIM_GetITStatus+0x42>
 8000c36:	897b      	ldrh	r3, [r7, #10]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	e001      	b.n	8000c46 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	821a      	strh	r2, [r3, #16]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	8a1b      	ldrh	r3, [r3, #16]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	88db      	ldrh	r3, [r3, #6]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	4313      	orrs	r3, r2
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	899b      	ldrh	r3, [r3, #12]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000cc4:	f023 030c 	bic.w	r3, r3, #12
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	889a      	ldrh	r2, [r3, #4]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	891b      	ldrh	r3, [r3, #8]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	461a      	mov	r2, r3
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	8a9b      	ldrh	r3, [r3, #20]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	899b      	ldrh	r3, [r3, #12]
 8000d02:	461a      	mov	r2, r3
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	4313      	orrs	r3, r2
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fd5e 	bl	80007d8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a30      	ldr	r2, [pc, #192]	; (8000de0 <USART_Init+0x168>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d003      	beq.n	8000d2c <USART_Init+0xb4>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a2f      	ldr	r2, [pc, #188]	; (8000de4 <USART_Init+0x16c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d102      	bne.n	8000d32 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	623b      	str	r3, [r7, #32]
 8000d30:	e001      	b.n	8000d36 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	899b      	ldrh	r3, [r3, #12]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	da0c      	bge.n	8000d5c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000d42:	6a3a      	ldr	r2, [r7, #32]
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	009a      	lsls	r2, r3, #2
 8000d4c:	441a      	add	r2, r3
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d58:	61fb      	str	r3, [r7, #28]
 8000d5a:	e00b      	b.n	8000d74 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000d5c:	6a3a      	ldr	r2, [r7, #32]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	009a      	lsls	r2, r3, #2
 8000d66:	441a      	add	r2, r3
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <USART_Init+0x170>)
 8000d78:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7c:	095b      	lsrs	r3, r3, #5
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	091b      	lsrs	r3, r3, #4
 8000d86:	2264      	movs	r2, #100	; 0x64
 8000d88:	fb02 f303 	mul.w	r3, r2, r3
 8000d8c:	69fa      	ldr	r2, [r7, #28]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	899b      	ldrh	r3, [r3, #12]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	da0c      	bge.n	8000db8 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	3332      	adds	r3, #50	; 0x32
 8000da4:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <USART_Init+0x170>)
 8000da6:	fba2 2303 	umull	r2, r3, r2, r3
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000db2:	4313      	orrs	r3, r2
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
 8000db6:	e00b      	b.n	8000dd0 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	3332      	adds	r3, #50	; 0x32
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <USART_Init+0x170>)
 8000dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc4:	095b      	lsrs	r3, r3, #5
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	811a      	strh	r2, [r3, #8]
}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40011000 	.word	0x40011000
 8000de4:	40011400 	.word	0x40011400
 8000de8:	51eb851f 	.word	0x51eb851f

08000dec <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d008      	beq.n	8000e10 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	899b      	ldrh	r3, [r3, #12]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000e0e:	e007      	b.n	8000e20 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	899b      	ldrh	r3, [r3, #12]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	819a      	strh	r2, [r3, #12]
  }
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000e38:	887b      	ldrh	r3, [r7, #2]
 8000e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	809a      	strh	r2, [r3, #4]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	095b      	lsrs	r3, r3, #5
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	f003 031f 	and.w	r3, r3, #31
 8000e84:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000e86:	2201      	movs	r2, #1
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d103      	bne.n	8000e9e <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	330c      	adds	r3, #12
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	e009      	b.n	8000eb2 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d103      	bne.n	8000eac <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	3310      	adds	r3, #16
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	e002      	b.n	8000eb2 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	3314      	adds	r3, #20
 8000eb0:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000eb2:	787b      	ldrb	r3, [r7, #1]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d006      	beq.n	8000ec6 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	6811      	ldr	r1, [r2, #0]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000ec4:	e006      	b.n	8000ed4 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	6811      	ldr	r1, [r2, #0]
 8000ecc:	68ba      	ldr	r2, [r7, #8]
 8000ece:	43d2      	mvns	r2, r2
 8000ed0:	400a      	ands	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	371c      	adds	r7, #28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	887b      	ldrh	r3, [r7, #2]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e001      	b.n	8000f0a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <_Z15initSYSTEMCLOCKv>:
extern volatile uint8_t array[2];

char *char_pointer;
int i;

void initSYSTEMCLOCK(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

	RCC_HSICmd(ENABLE);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f7ff fc2f 	bl	8000780 <RCC_HSICmd>
	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8000f22:	2021      	movs	r0, #33	; 0x21
 8000f24:	f7ff fd82 	bl	8000a2c <RCC_GetFlagStatus>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	bf0c      	ite	eq
 8000f2e:	2301      	moveq	r3, #1
 8000f30:	2300      	movne	r3, #0
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d000      	beq.n	8000f3a <_Z15initSYSTEMCLOCKv+0x22>
 8000f38:	e7f3      	b.n	8000f22 <_Z15initSYSTEMCLOCKv+0xa>

	RCC_SYSCLKConfig(RCC_CFGR_SW_HSI);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f7ff fc30 	bl	80007a0 <RCC_SYSCLKConfig>
	SystemCoreClockUpdate();
 8000f40:	f000 fab0 	bl	80014a4 <SystemCoreClockUpdate>

	//uint32_t SystemClockValue = SystemCoreClock;

	return;
 8000f44:	bf00      	nop

}
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_Z7initLEDv>:

void initLED(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 8000f4e:	2101      	movs	r1, #1
 8000f50:	2008      	movs	r0, #8
 8000f52:	f7ff fceb 	bl	800092c <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef initStruct;
	initStruct.GPIO_Pin = GPIO_Pin_12;
 8000f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5a:	603b      	str	r3, [r7, #0]
	initStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	713b      	strb	r3, [r7, #4]
	initStruct.GPIO_OType = GPIO_OType_PP;
 8000f60:	2300      	movs	r3, #0
 8000f62:	71bb      	strb	r3, [r7, #6]
	initStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	71fb      	strb	r3, [r7, #7]
	initStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOD,&initStruct);
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <_Z7initLEDv+0x38>)
 8000f72:	f7ff fb0d 	bl	8000590 <GPIO_Init>

	return;
 8000f76:	bf00      	nop

}
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020c00 	.word	0x40020c00

08000f84 <_Z9initTIMERP11TIM_TypeDeft>:

void initTIMER(TIM_TypeDef* Timer, uint16_t TimerVal) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000f90:	2101      	movs	r1, #1
 8000f92:	2001      	movs	r0, #1
 8000f94:	f7ff fcea 	bl	800096c <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = 8000-1;
 8000f98:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8000f9c:	81bb      	strh	r3, [r7, #12]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	81fb      	strh	r3, [r7, #14]
	timerInitStructure.TIM_Period = TimerVal-1;
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
	timerInitStructure.TIM_ClockDivision = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	82bb      	strh	r3, [r7, #20]
	timerInitStructure.TIM_RepetitionCounter = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	75bb      	strb	r3, [r7, #22]
	TIM_TimeBaseInit(Timer, &timerInitStructure);
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff fd72 	bl	8000aa0 <TIM_TimeBaseInit>
	TIM_Cmd(Timer, ENABLE);
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fdda 	bl	8000b78 <TIM_Cmd>
	TIM_ITConfig(Timer, TIM_IT_Update, ENABLE); // povolenie update eventu
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff fdf5 	bl	8000bb8 <TIM_ITConfig>

	return;
 8000fce:	bf00      	nop
}
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop

08000fd8 <_Z20EnableTimerInterruptv>:

void EnableTimerInterrupt(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0

    NVIC_InitTypeDef nvicStructure;
    nvicStructure.NVIC_IRQChannel = TIM2_IRQn;
 8000fde:	231c      	movs	r3, #28
 8000fe0:	713b      	strb	r3, [r7, #4]
    nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	717b      	strb	r3, [r7, #5]
    nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	71bb      	strb	r3, [r7, #6]
    nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8000fea:	2301      	movs	r3, #1
 8000fec:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&nvicStructure);
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8e9 	bl	80001c8 <NVIC_Init>

    return;
 8000ff6:	bf00      	nop
}
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop

08001000 <TIM2_IRQHandler>:

extern "C" void TIM2_IRQHandler(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0

	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 8001006:	2101      	movs	r1, #1
 8001008:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800100c:	f7ff fdf8 	bl	8000c00 <TIM_GetITStatus>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	bf14      	ite	ne
 8001016:	2301      	movne	r3, #1
 8001018:	2300      	moveq	r3, #0
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d064      	beq.n	80010ea <TIM2_IRQHandler+0xea>

		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8001020:	2101      	movs	r1, #1
 8001022:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001026:	f7ff fe15 	bl	8000c54 <TIM_ClearITPendingBit>
		GPIO_SetBits(GPIOD, GPIO_Pin_12); // LED sa pre posielanim zazne
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4831      	ldr	r0, [pc, #196]	; (80010f4 <TIM2_IRQHandler+0xf4>)
 8001030:	f7ff fb3c 	bl	80006ac <GPIO_SetBits>

		// najprv sa posle x potom y
		for (int j=0; j<2; j++) {
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b01      	cmp	r3, #1
 800103c:	dc4f      	bgt.n	80010de <TIM2_IRQHandler+0xde>

			// konverzia hodnoty z ADC na pole charov, funkcia vracia smernik
			char_pointer = INTconversionCHAR(array[j]);
 800103e:	4a2e      	ldr	r2, [pc, #184]	; (80010f8 <TIM2_IRQHandler+0xf8>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f85d 	bl	8001108 <_Z17INTconversionCHARh>
 800104e:	4602      	mov	r2, r0
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <TIM2_IRQHandler+0xfc>)
 8001052:	601a      	str	r2, [r3, #0]

			i = *(char_pointer); // na 1. mieste je pocet cifier
 8001054:	4b29      	ldr	r3, [pc, #164]	; (80010fc <TIM2_IRQHandler+0xfc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <TIM2_IRQHandler+0x100>)
 800105e:	601a      	str	r2, [r3, #0]
			while (i>0) {
 8001060:	4b27      	ldr	r3, [pc, #156]	; (8001100 <TIM2_IRQHandler+0x100>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	dd1d      	ble.n	80010a4 <TIM2_IRQHandler+0xa4>
				while (USART_GetFlagStatus(USART1,USART_FLAG_TXE)==0) {};
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	4826      	ldr	r0, [pc, #152]	; (8001104 <TIM2_IRQHandler+0x104>)
 800106c:	f7ff ff38 	bl	8000ee0 <USART_GetFlagStatus>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	bf0c      	ite	eq
 8001076:	2301      	moveq	r3, #1
 8001078:	2300      	movne	r3, #0
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d000      	beq.n	8001082 <TIM2_IRQHandler+0x82>
 8001080:	e7f2      	b.n	8001068 <TIM2_IRQHandler+0x68>
				USART_SendData(USART1,*(char_pointer+i));
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <TIM2_IRQHandler+0xfc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <TIM2_IRQHandler+0x100>)
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b29b      	uxth	r3, r3
 8001090:	4619      	mov	r1, r3
 8001092:	481c      	ldr	r0, [pc, #112]	; (8001104 <TIM2_IRQHandler+0x104>)
 8001094:	f7ff feca 	bl	8000e2c <USART_SendData>
				i--;
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <TIM2_IRQHandler+0x100>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3b01      	subs	r3, #1
 800109e:	4a18      	ldr	r2, [pc, #96]	; (8001100 <TIM2_IRQHandler+0x100>)
 80010a0:	6013      	str	r3, [r2, #0]

			// konverzia hodnoty z ADC na pole charov, funkcia vracia smernik
			char_pointer = INTconversionCHAR(array[j]);

			i = *(char_pointer); // na 1. mieste je pocet cifier
			while (i>0) {
 80010a2:	e7dd      	b.n	8001060 <TIM2_IRQHandler+0x60>
				USART_SendData(USART1,*(char_pointer+i));
				i--;
			}

			// najprv space a pootm new line
			while (USART_GetFlagStatus(USART1,USART_FLAG_TXE)==0) {};
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	4817      	ldr	r0, [pc, #92]	; (8001104 <TIM2_IRQHandler+0x104>)
 80010a8:	f7ff ff1a 	bl	8000ee0 <USART_GetFlagStatus>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	bf0c      	ite	eq
 80010b2:	2301      	moveq	r3, #1
 80010b4:	2300      	movne	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d000      	beq.n	80010be <TIM2_IRQHandler+0xbe>
 80010bc:	e7f2      	b.n	80010a4 <TIM2_IRQHandler+0xa4>
			if (j==0) {
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d104      	bne.n	80010ce <TIM2_IRQHandler+0xce>
				USART_SendData(USART1,32);
 80010c4:	2120      	movs	r1, #32
 80010c6:	480f      	ldr	r0, [pc, #60]	; (8001104 <TIM2_IRQHandler+0x104>)
 80010c8:	f7ff feb0 	bl	8000e2c <USART_SendData>
 80010cc:	e003      	b.n	80010d6 <TIM2_IRQHandler+0xd6>
			} else {
				USART_SendData(USART1,13);
 80010ce:	210d      	movs	r1, #13
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <TIM2_IRQHandler+0x104>)
 80010d2:	f7ff feab 	bl	8000e2c <USART_SendData>

		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
		GPIO_SetBits(GPIOD, GPIO_Pin_12); // LED sa pre posielanim zazne

		// najprv sa posle x potom y
		for (int j=0; j<2; j++) {
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3301      	adds	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	e7ac      	b.n	8001038 <TIM2_IRQHandler+0x38>
				USART_SendData(USART1,13);
			}

		}

		GPIO_ResetBits(GPIOD, GPIO_Pin_12); // LED po poslani zhasne
 80010de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e2:	4804      	ldr	r0, [pc, #16]	; (80010f4 <TIM2_IRQHandler+0xf4>)
 80010e4:	f7ff faf2 	bl	80006cc <GPIO_ResetBits>
		while (USART_GetFlagStatus(USART1,USART_FLAG_TXE)==0) {};
		USART_SendData(USART1,array[1]);
		*/
	}

	return;
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop

}
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40020c00 	.word	0x40020c00
 80010f8:	2000004c 	.word	0x2000004c
 80010fc:	20000040 	.word	0x20000040
 8001100:	20000044 	.word	0x20000044
 8001104:	40011000 	.word	0x40011000

08001108 <_Z17INTconversionCHARh>:

char *INTconversionCHAR(uint8_t value) {
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]

	// funkcia vracia smernik na pole

	int j = 1; // index pola, zacina na 1
 8001112:	2301      	movs	r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
	static char char_array[4]; // pole, na 1. mieste pocet cifier hodnoty z ADC (1-3)

	do {
		*(char_array+j) = (char)(value % 10) + '0'; // konverzia z INT na CHAR
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <_Z17INTconversionCHARh+0x64>)
 800111a:	1898      	adds	r0, r3, r2
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <_Z17INTconversionCHARh+0x68>)
 8001120:	fba3 1302 	umull	r1, r3, r3, r2
 8001124:	08d9      	lsrs	r1, r3, #3
 8001126:	460b      	mov	r3, r1
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	3330      	adds	r3, #48	; 0x30
 8001134:	b2db      	uxtb	r3, r3
 8001136:	7003      	strb	r3, [r0, #0]
		value /= 10;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <_Z17INTconversionCHARh+0x68>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	71fb      	strb	r3, [r7, #7]
		j++;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3301      	adds	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
	// funkcia vracia smernik na pole

	int j = 1; // index pola, zacina na 1
	static char char_array[4]; // pole, na 1. mieste pocet cifier hodnoty z ADC (1-3)

	do {
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d000      	beq.n	8001152 <_Z17INTconversionCHARh+0x4a>
 8001150:	e7e1      	b.n	8001116 <_Z17INTconversionCHARh+0xe>
		*(char_array+j) = (char)(value % 10) + '0'; // konverzia z INT na CHAR
		value /= 10;
		j++;
	} while (value);

	*(char_array) = j-1; // teraz uz vieme pocet cifier, zapis na 1. miesto v poli
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	3b01      	subs	r3, #1
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <_Z17INTconversionCHARh+0x64>)
 800115c:	701a      	strb	r2, [r3, #0]

	return char_array;
 800115e:	4b03      	ldr	r3, [pc, #12]	; (800116c <_Z17INTconversionCHARh+0x64>)
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	20000048 	.word	0x20000048
 8001170:	cccccccd 	.word	0xcccccccd

08001174 <_Z9initUSARTv>:

void initUSART(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0

	 /* enable APB2 peripheral clock for USART1
	  * note that only USART1 and USART6 are connected to APB2
	  * the other USARTs are connected to APB1
	  */
	 RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 800117a:	2101      	movs	r1, #1
 800117c:	2010      	movs	r0, #16
 800117e:	f7ff fc15 	bl	80009ac <RCC_APB2PeriphClockCmd>

	 /* enable the peripheral clock for the pins used by
	  * USART1, PB6 for TX and PB7 for RX
	  */
	 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001182:	2101      	movs	r1, #1
 8001184:	2002      	movs	r0, #2
 8001186:	f7ff fbd1 	bl	800092c <RCC_AHB1PeriphClockCmd>

	 /* This sequence sets up the TX and RX pins
	  * so they work correctly with the USART1 peripheral
	  */
	 GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // Pins 6 (TX) and 7 (RX) are used
 800118a:	23c0      	movs	r3, #192	; 0xc0
 800118c:	61bb      	str	r3, [r7, #24]
	 GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			 // the pins are configured as alternate function so the USART peripheral has access to them
 800118e:	2302      	movs	r3, #2
 8001190:	773b      	strb	r3, [r7, #28]
	 GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		 // this defines the IO speed and has nothing to do with the baudrate!
 8001192:	2302      	movs	r3, #2
 8001194:	777b      	strb	r3, [r7, #29]
	 GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;		 // this defines the output type as push pull mode (as opposed to open drain)
 8001196:	2300      	movs	r3, #0
 8001198:	77bb      	strb	r3, [r7, #30]
	 GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			 // this activates the pullup resistors on the IO pins
 800119a:	2301      	movs	r3, #1
 800119c:	77fb      	strb	r3, [r7, #31]
	 GPIO_Init(GPIOB, &GPIO_InitStruct);				 // now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 800119e:	f107 0318 	add.w	r3, r7, #24
 80011a2:	4619      	mov	r1, r3
 80011a4:	481c      	ldr	r0, [pc, #112]	; (8001218 <_Z9initUSARTv+0xa4>)
 80011a6:	f7ff f9f3 	bl	8000590 <GPIO_Init>

	 /* The RX and TX pins are now connected to their AF
	  * so that the USART1 can take over control of the
	  * pins
	  */
	 GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 80011aa:	2207      	movs	r2, #7
 80011ac:	2106      	movs	r1, #6
 80011ae:	481a      	ldr	r0, [pc, #104]	; (8001218 <_Z9initUSARTv+0xa4>)
 80011b0:	f7ff fa9c 	bl	80006ec <GPIO_PinAFConfig>
	 GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 80011b4:	2207      	movs	r2, #7
 80011b6:	2107      	movs	r1, #7
 80011b8:	4817      	ldr	r0, [pc, #92]	; (8001218 <_Z9initUSARTv+0xa4>)
 80011ba:	f7ff fa97 	bl	80006ec <GPIO_PinAFConfig>

	 /* Now the USART_InitStruct is used to define the
	  * properties of USART1
	  */
	 USART_InitStruct.USART_BaudRate = 9600;				 // the baudrate is set to the value we passed into this init function
 80011be:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80011c2:	60bb      	str	r3, [r7, #8]
	 USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 80011c4:	2300      	movs	r3, #0
 80011c6:	81bb      	strh	r3, [r7, #12]
	 USART_InitStruct.USART_StopBits = USART_StopBits_1;	 // we want 1 stop bit (standard)
 80011c8:	2300      	movs	r3, #0
 80011ca:	81fb      	strh	r3, [r7, #14]
	 USART_InitStruct.USART_Parity = USART_Parity_No;		 // we don't want a parity bit (standard)
 80011cc:	2300      	movs	r3, #0
 80011ce:	823b      	strh	r3, [r7, #16]
	 USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 80011d0:	2300      	movs	r3, #0
 80011d2:	82bb      	strh	r3, [r7, #20]
	 USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 80011d4:	230c      	movs	r3, #12
 80011d6:	827b      	strh	r3, [r7, #18]
	 USART_Init(USART1, &USART_InitStruct);					 // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 80011d8:	f107 0308 	add.w	r3, r7, #8
 80011dc:	4619      	mov	r1, r3
 80011de:	480f      	ldr	r0, [pc, #60]	; (800121c <_Z9initUSARTv+0xa8>)
 80011e0:	f7ff fd4a 	bl	8000c78 <USART_Init>
	 /* Here the USART1 receive interrupt is enabled
	  * and the interrupt controller is configured
	  * to jump to the USART1_IRQHandler() function
	  * if the USART1 receive interrupt occurs
	  */
	 USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt
 80011e4:	2201      	movs	r2, #1
 80011e6:	f240 5125 	movw	r1, #1317	; 0x525
 80011ea:	480c      	ldr	r0, [pc, #48]	; (800121c <_Z9initUSARTv+0xa8>)
 80011ec:	f7ff fe30 	bl	8000e50 <USART_ITConfig>

	 NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		  // we want to configure the USART1 interrupts
 80011f0:	2325      	movs	r3, #37	; 0x25
 80011f2:	713b      	strb	r3, [r7, #4]
	 NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 8; // this sets the priority group of the USART1 interrupts
 80011f4:	2308      	movs	r3, #8
 80011f6:	717b      	strb	r3, [r7, #5]
	 NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		  // this sets the subpriority inside the group
 80011f8:	2300      	movs	r3, #0
 80011fa:	71bb      	strb	r3, [r7, #6]
	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			  // the USART1 interrupts are globally enabled
 80011fc:	2301      	movs	r3, #1
 80011fe:	71fb      	strb	r3, [r7, #7]
	 NVIC_Init(&NVIC_InitStructure);							  // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	4618      	mov	r0, r3
 8001204:	f7fe ffe0 	bl	80001c8 <NVIC_Init>

	 // finally this enables the complete USART1 peripheral
	 USART_Cmd(USART1, ENABLE);
 8001208:	2101      	movs	r1, #1
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <_Z9initUSARTv+0xa8>)
 800120c:	f7ff fdee 	bl	8000dec <USART_Cmd>

	 return;
 8001210:	bf00      	nop
}
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40020400 	.word	0x40020400
 800121c:	40011000 	.word	0x40011000

08001220 <_Z7initADCv>:

void initADC(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0

	ADC_InitTypeDef ADC_init_structure; //Structure for adc confguration
	GPIO_InitTypeDef GPIO_initStructre; //Structure for analog input pin
	//Clock configuration
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);//The ADC1 is connected the APB2 peripheral bus thus we will use its clock source
 8001226:	2101      	movs	r1, #1
 8001228:	f44f 7080 	mov.w	r0, #256	; 0x100
 800122c:	f7ff fbbe 	bl	80009ac <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1ENR_GPIOCEN,ENABLE);//Clock for the ADC port!! Do not forget about this one ;)
 8001230:	2101      	movs	r1, #1
 8001232:	2004      	movs	r0, #4
 8001234:	f7ff fb7a 	bl	800092c <RCC_AHB1PeriphClockCmd>
	//Analog pin configuration
	GPIO_initStructre.GPIO_Pin = GPIO_Pin_0;//The channel 10 is connected to PC0
 8001238:	2301      	movs	r3, #1
 800123a:	603b      	str	r3, [r7, #0]
	GPIO_initStructre.GPIO_Mode = GPIO_Mode_AN; //The PC0 pin is configured in analog mode
 800123c:	2303      	movs	r3, #3
 800123e:	713b      	strb	r3, [r7, #4]
	GPIO_initStructre.GPIO_PuPd = GPIO_PuPd_NOPULL; //We don't need any pull up or pull down
 8001240:	2300      	movs	r3, #0
 8001242:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOC,&GPIO_initStructre);//Affecting the port with the initialization structure configuration
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	4816      	ldr	r0, [pc, #88]	; (80012a4 <_Z7initADCv+0x84>)
 800124a:	f7ff f9a1 	bl	8000590 <GPIO_Init>

	//Analog pin configuration
	GPIO_initStructre.GPIO_Pin = GPIO_Pin_1;//The channel 10 is connected to PC0
 800124e:	2302      	movs	r3, #2
 8001250:	603b      	str	r3, [r7, #0]
	GPIO_initStructre.GPIO_Mode = GPIO_Mode_AN; //The PC0 pin is configured in analog mode
 8001252:	2303      	movs	r3, #3
 8001254:	713b      	strb	r3, [r7, #4]
	GPIO_initStructre.GPIO_PuPd = GPIO_PuPd_NOPULL; //We don't need any pull up or pull down
 8001256:	2300      	movs	r3, #0
 8001258:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOC,&GPIO_initStructre);//Affecting the port with the initialization structure configuration
 800125a:	463b      	mov	r3, r7
 800125c:	4619      	mov	r1, r3
 800125e:	4811      	ldr	r0, [pc, #68]	; (80012a4 <_Z7initADCv+0x84>)
 8001260:	f7ff f996 	bl	8000590 <GPIO_Init>

	//ADC structure configuration
	ADC_DeInit();
 8001264:	f7ff f812 	bl	800028c <ADC_DeInit>
	ADC_init_structure.ADC_DataAlign = ADC_DataAlign_Right;//data converted will be shifted to right
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
	ADC_init_structure.ADC_Resolution = ADC_Resolution_8b;//Input voltage is converted into a 12bit number giving a maximum value of 4096
 800126c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001270:	60bb      	str	r3, [r7, #8]
	ADC_init_structure.ADC_ContinuousConvMode = ENABLE; //the conversion is continuous, the input data is converted more than once
 8001272:	2301      	movs	r3, #1
 8001274:	737b      	strb	r3, [r7, #13]
	ADC_init_structure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;// conversion is synchronous with TIM1 and CC1 (actually I'm not sure about this one :/)
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
	ADC_init_structure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;//no trigger for conversion
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
	ADC_init_structure.ADC_NbrOfConversion = 2;//I think this one is clear :p
 800127e:	2302      	movs	r3, #2
 8001280:	773b      	strb	r3, [r7, #28]
	ADC_init_structure.ADC_ScanConvMode = ENABLE;//The scan is configured in one channel
 8001282:	2301      	movs	r3, #1
 8001284:	733b      	strb	r3, [r7, #12]
	ADC_Init(ADC1,&ADC_init_structure);//Initialize ADC with the previous configuration
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	4619      	mov	r1, r3
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <_Z7initADCv+0x88>)
 800128e:	f7ff f80b 	bl	80002a8 <ADC_Init>
	//Enable ADC conversion
	ADC_Cmd(ADC1,ENABLE);
 8001292:	2101      	movs	r1, #1
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <_Z7initADCv+0x88>)
 8001296:	f7ff f85d 	bl	8000354 <ADC_Cmd>

	return;
 800129a:	bf00      	nop
}
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40012000 	.word	0x40012000

080012ac <_Z13ADC_Convert_xv>:

uint8_t ADC_Convert_x(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0

	//Select the channel to be read from
	ADC_RegularChannelConfig(ADC1,ADC_Channel_10,1,ADC_SampleTime_144Cycles);
 80012b0:	2306      	movs	r3, #6
 80012b2:	2201      	movs	r2, #1
 80012b4:	210a      	movs	r1, #10
 80012b6:	480d      	ldr	r0, [pc, #52]	; (80012ec <_Z13ADC_Convert_xv+0x40>)
 80012b8:	f7ff f868 	bl	800038c <ADC_RegularChannelConfig>

	ADC_SoftwareStartConv(ADC1);//Start the conversion
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <_Z13ADC_Convert_xv+0x40>)
 80012be:	f7ff f92f 	bl	8000520 <ADC_SoftwareStartConv>
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));//Processing the conversion
 80012c2:	2102      	movs	r1, #2
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <_Z13ADC_Convert_xv+0x40>)
 80012c6:	f7ff f949 	bl	800055c <ADC_GetFlagStatus>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d000      	beq.n	80012dc <_Z13ADC_Convert_xv+0x30>
 80012da:	e7f2      	b.n	80012c2 <_Z13ADC_Convert_xv+0x16>

	return ADC_GetConversionValue(ADC1); //Return the converted data;
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <_Z13ADC_Convert_xv+0x40>)
 80012de:	f7ff f92f 	bl	8000540 <ADC_GetConversionValue>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b2db      	uxtb	r3, r3
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40012000 	.word	0x40012000

080012f0 <_Z13ADC_Convert_yv>:

uint8_t ADC_Convert_y(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0

	//Select the channel to be read from
	ADC_RegularChannelConfig(ADC1,ADC_Channel_11,1,ADC_SampleTime_144Cycles);
 80012f4:	2306      	movs	r3, #6
 80012f6:	2201      	movs	r2, #1
 80012f8:	210b      	movs	r1, #11
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <_Z13ADC_Convert_yv+0x40>)
 80012fc:	f7ff f846 	bl	800038c <ADC_RegularChannelConfig>

	ADC_SoftwareStartConv(ADC1);//Start the conversion
 8001300:	480b      	ldr	r0, [pc, #44]	; (8001330 <_Z13ADC_Convert_yv+0x40>)
 8001302:	f7ff f90d 	bl	8000520 <ADC_SoftwareStartConv>
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));//Processing the conversion
 8001306:	2102      	movs	r1, #2
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <_Z13ADC_Convert_yv+0x40>)
 800130a:	f7ff f927 	bl	800055c <ADC_GetFlagStatus>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	bf0c      	ite	eq
 8001314:	2301      	moveq	r3, #1
 8001316:	2300      	movne	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d000      	beq.n	8001320 <_Z13ADC_Convert_yv+0x30>
 800131e:	e7f2      	b.n	8001306 <_Z13ADC_Convert_yv+0x16>

	return ADC_GetConversionValue(ADC1); //Return the converted data;
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <_Z13ADC_Convert_yv+0x40>)
 8001322:	f7ff f90d 	bl	8000540 <ADC_GetConversionValue>
 8001326:	4603      	mov	r3, r0
 8001328:	b2db      	uxtb	r3, r3
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40012000 	.word	0x40012000

08001334 <main>:
**===========================================================================
*/

volatile uint8_t array[2];

int main(void) {
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

	initSYSTEMCLOCK();
 8001338:	f7ff fdee 	bl	8000f18 <_Z15initSYSTEMCLOCKv>

	initLED();
 800133c:	f7ff fe04 	bl	8000f48 <_Z7initLEDv>
	initUSART();
 8001340:	f7ff ff18 	bl	8001174 <_Z9initUSARTv>
	initTIMER(TIM2,100); // TIM 2-7, 12-14 na APB1, hodnota resetu v ms
 8001344:	2164      	movs	r1, #100	; 0x64
 8001346:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800134a:	f7ff fe1b 	bl	8000f84 <_Z9initTIMERP11TIM_TypeDeft>
	EnableTimerInterrupt();
 800134e:	f7ff fe43 	bl	8000fd8 <_Z20EnableTimerInterruptv>

	initADC();
 8001352:	f7ff ff65 	bl	8001220 <_Z7initADCv>

	while (1) {

		array[0] = ADC_Convert_x();
 8001356:	f7ff ffa9 	bl	80012ac <_Z13ADC_Convert_xv>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <main+0x3c>)
 8001360:	701a      	strb	r2, [r3, #0]
		array[1] = ADC_Convert_y();
 8001362:	f7ff ffc5 	bl	80012f0 <_Z13ADC_Convert_yv>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b01      	ldr	r3, [pc, #4]	; (8001370 <main+0x3c>)
 800136c:	705a      	strb	r2, [r3, #1]
	initTIMER(TIM2,100); // TIM 2-7, 12-14 na APB1, hodnota resetu v ms
	EnableTimerInterrupt();

	initADC();

	while (1) {
 800136e:	e7f2      	b.n	8001356 <main+0x22>
 8001370:	2000004c 	.word	0x2000004c

08001374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001378:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800137a:	e003      	b.n	8001384 <LoopCopyDataInit>

0800137c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800137e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001380:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001382:	3104      	adds	r1, #4

08001384 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001384:	480b      	ldr	r0, [pc, #44]	; (80013b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001388:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800138a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800138c:	d3f6      	bcc.n	800137c <CopyDataInit>
  ldr  r2, =_sbss
 800138e:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001390:	e002      	b.n	8001398 <LoopFillZerobss>

08001392 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001392:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001394:	f842 3b04 	str.w	r3, [r2], #4

08001398 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800139a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800139c:	d3f9      	bcc.n	8001392 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800139e:	f000 f84b 	bl	8001438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a2:	f000 f979 	bl	8001698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a6:	f7ff ffc5 	bl	8001334 <main>
  bx  lr    
 80013aa:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013ac:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80013b0:	08001704 	.word	0x08001704
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013b8:	20000024 	.word	0x20000024
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80013bc:	20000024 	.word	0x20000024
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013c0:	20000050 	.word	0x20000050

080013c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC_IRQHandler>
	...

080013c8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80013dc:	e7fe      	b.n	80013dc <HardFault_Handler+0x4>
 80013de:	bf00      	nop

080013e0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>
 80013e6:	bf00      	nop

080013e8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80013ec:	e7fe      	b.n	80013ec <BusFault_Handler+0x4>
 80013ee:	bf00      	nop

080013f0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80013f4:	e7fe      	b.n	80013f4 <UsageFault_Handler+0x4>
 80013f6:	bf00      	nop

080013f8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop

08001408 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop

08001428 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop

08001438 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800143c:	4a16      	ldr	r2, [pc, #88]	; (8001498 <SystemInit+0x60>)
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <SystemInit+0x60>)
 8001440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800144c:	4a13      	ldr	r2, [pc, #76]	; (800149c <SystemInit+0x64>)
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <SystemInit+0x64>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <SystemInit+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800145e:	4a0f      	ldr	r2, [pc, #60]	; (800149c <SystemInit+0x64>)
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <SystemInit+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <SystemInit+0x64>)
 8001470:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <SystemInit+0x68>)
 8001472:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001474:	4a09      	ldr	r2, [pc, #36]	; (800149c <SystemInit+0x64>)
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <SystemInit+0x64>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <SystemInit+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001486:	f000 f88b 	bl	80015a0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800148a:	4b03      	ldr	r3, [pc, #12]	; (8001498 <SystemInit+0x60>)
 800148c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001490:	609a      	str	r2, [r3, #8]
#endif
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00
 800149c:	40023800 	.word	0x40023800
 80014a0:	24003010 	.word	0x24003010

080014a4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	2302      	movs	r3, #2
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	2302      	movs	r3, #2
 80014bc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80014be:	4b33      	ldr	r3, [pc, #204]	; (800158c <SystemCoreClockUpdate+0xe8>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d007      	beq.n	80014de <SystemCoreClockUpdate+0x3a>
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d009      	beq.n	80014e6 <SystemCoreClockUpdate+0x42>
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d13f      	bne.n	8001556 <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80014d6:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <SystemCoreClockUpdate+0xec>)
 80014d8:	4a2e      	ldr	r2, [pc, #184]	; (8001594 <SystemCoreClockUpdate+0xf0>)
 80014da:	601a      	str	r2, [r3, #0]
      break;
 80014dc:	e03f      	b.n	800155e <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80014de:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <SystemCoreClockUpdate+0xec>)
 80014e0:	4a2d      	ldr	r2, [pc, #180]	; (8001598 <SystemCoreClockUpdate+0xf4>)
 80014e2:	601a      	str	r2, [r3, #0]
      break;
 80014e4:	e03b      	b.n	800155e <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80014e6:	4b29      	ldr	r3, [pc, #164]	; (800158c <SystemCoreClockUpdate+0xe8>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ee:	0d9b      	lsrs	r3, r3, #22
 80014f0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <SystemCoreClockUpdate+0xe8>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014fa:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00d      	beq.n	800151e <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001502:	4a25      	ldr	r2, [pc, #148]	; (8001598 <SystemCoreClockUpdate+0xf4>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	fbb2 f2f3 	udiv	r2, r2, r3
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <SystemCoreClockUpdate+0xe8>)
 800150c:	6859      	ldr	r1, [r3, #4]
 800150e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001512:	400b      	ands	r3, r1
 8001514:	099b      	lsrs	r3, r3, #6
 8001516:	fb03 f302 	mul.w	r3, r3, r2
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	e00c      	b.n	8001538 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800151e:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <SystemCoreClockUpdate+0xf0>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	fbb2 f2f3 	udiv	r2, r2, r3
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <SystemCoreClockUpdate+0xe8>)
 8001528:	6859      	ldr	r1, [r3, #4]
 800152a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800152e:	400b      	ands	r3, r1
 8001530:	099b      	lsrs	r3, r3, #6
 8001532:	fb03 f302 	mul.w	r3, r3, r2
 8001536:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <SystemCoreClockUpdate+0xe8>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001540:	0c1b      	lsrs	r3, r3, #16
 8001542:	3301      	adds	r3, #1
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001550:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <SystemCoreClockUpdate+0xec>)
 8001552:	6013      	str	r3, [r2, #0]
      break;
 8001554:	e003      	b.n	800155e <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <SystemCoreClockUpdate+0xec>)
 8001558:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <SystemCoreClockUpdate+0xf0>)
 800155a:	601a      	str	r2, [r3, #0]
      break;
 800155c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <SystemCoreClockUpdate+0xe8>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	4a0c      	ldr	r2, [pc, #48]	; (800159c <SystemCoreClockUpdate+0xf8>)
 800156a:	5cd3      	ldrb	r3, [r2, r3]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <SystemCoreClockUpdate+0xec>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	fa22 f303 	lsr.w	r3, r2, r3
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <SystemCoreClockUpdate+0xec>)
 800157c:	6013      	str	r3, [r2, #0]
}
 800157e:	bf00      	nop
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	20000010 	.word	0x20000010
 8001594:	00f42400 	.word	0x00f42400
 8001598:	017d7840 	.word	0x017d7840
 800159c:	20000014 	.word	0x20000014

080015a0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80015ae:	4a36      	ldr	r2, [pc, #216]	; (8001688 <SetSysClock+0xe8>)
 80015b0:	4b35      	ldr	r3, [pc, #212]	; (8001688 <SetSysClock+0xe8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80015ba:	4b33      	ldr	r3, [pc, #204]	; (8001688 <SetSysClock+0xe8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3301      	adds	r3, #1
 80015c8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d103      	bne.n	80015d8 <SetSysClock+0x38>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80015d6:	d1f0      	bne.n	80015ba <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80015d8:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <SetSysClock+0xe8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80015e4:	2301      	movs	r3, #1
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	e001      	b.n	80015ee <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d142      	bne.n	800167a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80015f4:	4a24      	ldr	r2, [pc, #144]	; (8001688 <SetSysClock+0xe8>)
 80015f6:	4b24      	ldr	r3, [pc, #144]	; (8001688 <SetSysClock+0xe8>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fe:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001600:	4a22      	ldr	r2, [pc, #136]	; (800168c <SetSysClock+0xec>)
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <SetSysClock+0xec>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800160a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800160c:	4a1e      	ldr	r2, [pc, #120]	; (8001688 <SetSysClock+0xe8>)
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <SetSysClock+0xe8>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001614:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <SetSysClock+0xe8>)
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <SetSysClock+0xe8>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800161e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001620:	4a19      	ldr	r2, [pc, #100]	; (8001688 <SetSysClock+0xe8>)
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <SetSysClock+0xe8>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800162a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <SetSysClock+0xe8>)
 800162e:	4a18      	ldr	r2, [pc, #96]	; (8001690 <SetSysClock+0xf0>)
 8001630:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001632:	4a15      	ldr	r2, [pc, #84]	; (8001688 <SetSysClock+0xe8>)
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <SetSysClock+0xe8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800163c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800163e:	bf00      	nop
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <SetSysClock+0xe8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f9      	beq.n	8001640 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <SetSysClock+0xf4>)
 800164e:	f240 7205 	movw	r2, #1797	; 0x705
 8001652:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001654:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <SetSysClock+0xe8>)
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <SetSysClock+0xe8>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f023 0303 	bic.w	r3, r3, #3
 800165e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001660:	4a09      	ldr	r2, [pc, #36]	; (8001688 <SetSysClock+0xe8>)
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <SetSysClock+0xe8>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800166c:	bf00      	nop
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <SetSysClock+0xe8>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b08      	cmp	r3, #8
 8001678:	d1f9      	bne.n	800166e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40007000 	.word	0x40007000
 8001690:	07405419 	.word	0x07405419
 8001694:	40023c00 	.word	0x40023c00

08001698 <__libc_init_array>:
 8001698:	b570      	push	{r4, r5, r6, lr}
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <__libc_init_array+0x3c>)
 800169c:	4c0e      	ldr	r4, [pc, #56]	; (80016d8 <__libc_init_array+0x40>)
 800169e:	1ae4      	subs	r4, r4, r3
 80016a0:	10a4      	asrs	r4, r4, #2
 80016a2:	2500      	movs	r5, #0
 80016a4:	461e      	mov	r6, r3
 80016a6:	42a5      	cmp	r5, r4
 80016a8:	d004      	beq.n	80016b4 <__libc_init_array+0x1c>
 80016aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016ae:	4798      	blx	r3
 80016b0:	3501      	adds	r5, #1
 80016b2:	e7f8      	b.n	80016a6 <__libc_init_array+0xe>
 80016b4:	f000 f816 	bl	80016e4 <_init>
 80016b8:	4c08      	ldr	r4, [pc, #32]	; (80016dc <__libc_init_array+0x44>)
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <__libc_init_array+0x48>)
 80016bc:	1ae4      	subs	r4, r4, r3
 80016be:	10a4      	asrs	r4, r4, #2
 80016c0:	2500      	movs	r5, #0
 80016c2:	461e      	mov	r6, r3
 80016c4:	42a5      	cmp	r5, r4
 80016c6:	d004      	beq.n	80016d2 <__libc_init_array+0x3a>
 80016c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016cc:	4798      	blx	r3
 80016ce:	3501      	adds	r5, #1
 80016d0:	e7f8      	b.n	80016c4 <__libc_init_array+0x2c>
 80016d2:	bd70      	pop	{r4, r5, r6, pc}
 80016d4:	080016fc 	.word	0x080016fc
 80016d8:	080016fc 	.word	0x080016fc
 80016dc:	08001700 	.word	0x08001700
 80016e0:	080016fc 	.word	0x080016fc

080016e4 <_init>:
 80016e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e6:	bf00      	nop
 80016e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ea:	bc08      	pop	{r3}
 80016ec:	469e      	mov	lr, r3
 80016ee:	4770      	bx	lr

080016f0 <_fini>:
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f2:	bf00      	nop
 80016f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016f6:	bc08      	pop	{r3}
 80016f8:	469e      	mov	lr, r3
 80016fa:	4770      	bx	lr
